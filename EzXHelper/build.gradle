plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'maven-publish'
    id 'signing'
}

def versionName = "2.0.0-RC6"

android {
    compileSdkVersion = 33
    buildToolsVersion = "33.0.0"
    namespace = "com.github.kyuubiran"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 33

        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
        // freeCompilerArgs = ["-Xcontext-receivers"]
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

dependencies {
    compileOnly 'de.robv.android.xposed:api:82'
}

dokkaHtml {
    dokkaSourceSets {
        named("main") {
            noAndroidSdkLink.set(false)
            sourceRoots.from(file("src"))
            samples.from(project(":sample").file("src/main/java/com/example/sample"))
        }
    }

    doLast {
        def docTree = fileTree(
                dir: "${dokkaHtml.outputDirectory.get()}",
                includes: ["**/*.html"])
        docTree.each { file ->
            def text = file.text
            file.write(text.replace(
                    '<script src="https://unpkg.com/kotlin-playground@1"></script>',
                    '<script src="https://unpkg.com/kotlin-playground@1" data-server="https://kpi.ketal.icu"></script>'
            ))
        }
    }
}


def mavenPushProp = project.rootProject.file('mavenpush.properties')
def mavenPushPropExists = mavenPushProp.exists()
def mavenPush

if (mavenPushPropExists) {
    mavenPush = new Properties()
    def bufferedReader = new BufferedReader(new FileReader(mavenPushProp))
    mavenPush.load(bufferedReader)

    ext["signing.keyId"] = mavenPush['signing.keyId']
    ext["signing.password"] = mavenPush['signing.password']
    ext["signing.secretKeyRingFile"] = mavenPush['signing.secretKeyRingFile']
}

tasks.register('androidSourcesJar', Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                groupId = 'com.github.kyuubiran'
                artifactId = 'EzXHelper'
                version = versionName

                artifact "$buildDir/outputs/aar/${project.name}-release.aar"
                artifact androidSourcesJar

                pom {
                    name = 'EzXHelper'
                    description = 'A library to make Xposed modules development easier.'
                    url = 'https://github.com/KyuubiRan/EzXHelper'
                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'KyuubiRan'
                            name = 'KyuubiRan'
                            email = 'KyuubiRan@qq.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:github.com/KyuubiRan/EzXHelper.git'
                        developerConnection = 'scm:git:ssh://github.com/KyuubiRan/EzXHelper.git'
                        url = 'https://github.com/KyuubiRan/EzXHelper/tree/master'
                    }
                }
            }
        }

        if (mavenPushPropExists) {
            repositories {
                maven {
                    name = "EzXHelper"
                    url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
                    credentials {
                        username = mavenPush['ossrhUsername']
                        password = mavenPush['ossrhPassword']
                    }
                }
            }
        }
    }

    signing {
        if (mavenPushPropExists) {
            sign publishing.publications
        }
    }
}

